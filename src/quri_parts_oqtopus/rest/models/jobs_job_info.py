# coding: utf-8

"""
    OQTOPUS Cloud User API

    OQTOPUS Cloud User API. This API is used to interact with the OQTOPUS Cloud service. The API provides endpoints to manage devices, jobs, and results.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: oqtopus-team[at]googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobsJobInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input': 'AllOfjobsJobInfoInput',
        'combined_program': 'AllOfjobsJobInfoCombinedProgram',
        'result': 'AllOfjobsJobInfoResult',
        'transpile_result': 'AllOfjobsJobInfoTranspileResult',
        'sse_log': 'AllOfjobsJobInfoSseLog',
        'message': 'str'
    }

    attribute_map = {
        'input': 'input',
        'combined_program': 'combined_program',
        'result': 'result',
        'transpile_result': 'transpile_result',
        'sse_log': 'sse_log',
        'message': 'message'
    }

    def __init__(self, input=None, combined_program=None, result=None, transpile_result=None, sse_log=None, message=None):  # noqa: E501
        """JobsJobInfo - a model defined in Swagger"""  # noqa: E501
        self._input = None
        self._combined_program = None
        self._result = None
        self._transpile_result = None
        self._sse_log = None
        self._message = None
        self.discriminator = None
        self.input = input
        if combined_program is not None:
            self.combined_program = combined_program
        if result is not None:
            self.result = result
        if transpile_result is not None:
            self.transpile_result = transpile_result
        if sse_log is not None:
            self.sse_log = sse_log
        if message is not None:
            self.message = message

    @property
    def input(self):
        """Gets the input of this JobsJobInfo.  # noqa: E501


        :return: The input of this JobsJobInfo.  # noqa: E501
        :rtype: AllOfjobsJobInfoInput
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this JobsJobInfo.


        :param input: The input of this JobsJobInfo.  # noqa: E501
        :type: AllOfjobsJobInfoInput
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")  # noqa: E501

        self._input = input

    @property
    def combined_program(self):
        """Gets the combined_program of this JobsJobInfo.  # noqa: E501


        :return: The combined_program of this JobsJobInfo.  # noqa: E501
        :rtype: AllOfjobsJobInfoCombinedProgram
        """
        return self._combined_program

    @combined_program.setter
    def combined_program(self, combined_program):
        """Sets the combined_program of this JobsJobInfo.


        :param combined_program: The combined_program of this JobsJobInfo.  # noqa: E501
        :type: AllOfjobsJobInfoCombinedProgram
        """

        self._combined_program = combined_program

    @property
    def result(self):
        """Gets the result of this JobsJobInfo.  # noqa: E501


        :return: The result of this JobsJobInfo.  # noqa: E501
        :rtype: AllOfjobsJobInfoResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this JobsJobInfo.


        :param result: The result of this JobsJobInfo.  # noqa: E501
        :type: AllOfjobsJobInfoResult
        """

        self._result = result

    @property
    def transpile_result(self):
        """Gets the transpile_result of this JobsJobInfo.  # noqa: E501


        :return: The transpile_result of this JobsJobInfo.  # noqa: E501
        :rtype: AllOfjobsJobInfoTranspileResult
        """
        return self._transpile_result

    @transpile_result.setter
    def transpile_result(self, transpile_result):
        """Sets the transpile_result of this JobsJobInfo.


        :param transpile_result: The transpile_result of this JobsJobInfo.  # noqa: E501
        :type: AllOfjobsJobInfoTranspileResult
        """

        self._transpile_result = transpile_result

    @property
    def sse_log(self):
        """Gets the sse_log of this JobsJobInfo.  # noqa: E501


        :return: The sse_log of this JobsJobInfo.  # noqa: E501
        :rtype: AllOfjobsJobInfoSseLog
        """
        return self._sse_log

    @sse_log.setter
    def sse_log(self, sse_log):
        """Sets the sse_log of this JobsJobInfo.


        :param sse_log: The sse_log of this JobsJobInfo.  # noqa: E501
        :type: AllOfjobsJobInfoSseLog
        """

        self._sse_log = sse_log

    @property
    def message(self):
        """Gets the message of this JobsJobInfo.  # noqa: E501


        :return: The message of this JobsJobInfo.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this JobsJobInfo.


        :param message: The message of this JobsJobInfo.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobsJobInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsJobInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
