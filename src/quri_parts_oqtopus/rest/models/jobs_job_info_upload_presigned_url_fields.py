# coding: utf-8

"""
    OQTOPUS Cloud User API

    OQTOPUS Cloud User API. This API is used to interact with the OQTOPUS Cloud service. The API provides endpoints to manage devices, jobs, and results.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: oqtopus-team[at]googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobsJobInfoUploadPresignedURLFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'aws_access_key_id': 'str',
        'x_amz_security_token': 'str',
        'policy': 'str',
        'signature': 'str'
    }

    attribute_map = {
        'key': 'key',
        'aws_access_key_id': 'AWSAccessKeyId',
        'x_amz_security_token': 'x-amz-security-token',
        'policy': 'policy',
        'signature': 'signature'
    }

    def __init__(self, key=None, aws_access_key_id=None, x_amz_security_token=None, policy=None, signature=None):  # noqa: E501
        """JobsJobInfoUploadPresignedURLFields - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._aws_access_key_id = None
        self._x_amz_security_token = None
        self._policy = None
        self._signature = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if aws_access_key_id is not None:
            self.aws_access_key_id = aws_access_key_id
        if x_amz_security_token is not None:
            self.x_amz_security_token = x_amz_security_token
        if policy is not None:
            self.policy = policy
        if signature is not None:
            self.signature = signature

    @property
    def key(self):
        """Gets the key of this JobsJobInfoUploadPresignedURLFields.  # noqa: E501


        :return: The key of this JobsJobInfoUploadPresignedURLFields.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this JobsJobInfoUploadPresignedURLFields.


        :param key: The key of this JobsJobInfoUploadPresignedURLFields.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def aws_access_key_id(self):
        """Gets the aws_access_key_id of this JobsJobInfoUploadPresignedURLFields.  # noqa: E501


        :return: The aws_access_key_id of this JobsJobInfoUploadPresignedURLFields.  # noqa: E501
        :rtype: str
        """
        return self._aws_access_key_id

    @aws_access_key_id.setter
    def aws_access_key_id(self, aws_access_key_id):
        """Sets the aws_access_key_id of this JobsJobInfoUploadPresignedURLFields.


        :param aws_access_key_id: The aws_access_key_id of this JobsJobInfoUploadPresignedURLFields.  # noqa: E501
        :type: str
        """

        self._aws_access_key_id = aws_access_key_id

    @property
    def x_amz_security_token(self):
        """Gets the x_amz_security_token of this JobsJobInfoUploadPresignedURLFields.  # noqa: E501


        :return: The x_amz_security_token of this JobsJobInfoUploadPresignedURLFields.  # noqa: E501
        :rtype: str
        """
        return self._x_amz_security_token

    @x_amz_security_token.setter
    def x_amz_security_token(self, x_amz_security_token):
        """Sets the x_amz_security_token of this JobsJobInfoUploadPresignedURLFields.


        :param x_amz_security_token: The x_amz_security_token of this JobsJobInfoUploadPresignedURLFields.  # noqa: E501
        :type: str
        """

        self._x_amz_security_token = x_amz_security_token

    @property
    def policy(self):
        """Gets the policy of this JobsJobInfoUploadPresignedURLFields.  # noqa: E501


        :return: The policy of this JobsJobInfoUploadPresignedURLFields.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this JobsJobInfoUploadPresignedURLFields.


        :param policy: The policy of this JobsJobInfoUploadPresignedURLFields.  # noqa: E501
        :type: str
        """

        self._policy = policy

    @property
    def signature(self):
        """Gets the signature of this JobsJobInfoUploadPresignedURLFields.  # noqa: E501


        :return: The signature of this JobsJobInfoUploadPresignedURLFields.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this JobsJobInfoUploadPresignedURLFields.


        :param signature: The signature of this JobsJobInfoUploadPresignedURLFields.  # noqa: E501
        :type: str
        """

        self._signature = signature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobsJobInfoUploadPresignedURLFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsJobInfoUploadPresignedURLFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
