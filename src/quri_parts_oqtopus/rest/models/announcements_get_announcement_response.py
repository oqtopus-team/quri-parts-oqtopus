# coding: utf-8

"""
    OQTOPUS Cloud User API

    OQTOPUS Cloud User API. This API is used to interact with the OQTOPUS Cloud service. The API provides endpoints to manage devices, jobs, and results.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: oqtopus-team[at]googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnnouncementsGetAnnouncementResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'content': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'publishable': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'content': 'content',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'publishable': 'publishable'
    }

    def __init__(self, id=None, title=None, content=None, start_time=None, end_time=None, publishable=None):  # noqa: E501
        """AnnouncementsGetAnnouncementResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._content = None
        self._start_time = None
        self._end_time = None
        self._publishable = None
        self.discriminator = None
        self.id = id
        self.title = title
        self.content = content
        self.start_time = start_time
        self.end_time = end_time
        self.publishable = publishable

    @property
    def id(self):
        """Gets the id of this AnnouncementsGetAnnouncementResponse.  # noqa: E501


        :return: The id of this AnnouncementsGetAnnouncementResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnnouncementsGetAnnouncementResponse.


        :param id: The id of this AnnouncementsGetAnnouncementResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this AnnouncementsGetAnnouncementResponse.  # noqa: E501


        :return: The title of this AnnouncementsGetAnnouncementResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AnnouncementsGetAnnouncementResponse.


        :param title: The title of this AnnouncementsGetAnnouncementResponse.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def content(self):
        """Gets the content of this AnnouncementsGetAnnouncementResponse.  # noqa: E501


        :return: The content of this AnnouncementsGetAnnouncementResponse.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this AnnouncementsGetAnnouncementResponse.


        :param content: The content of this AnnouncementsGetAnnouncementResponse.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def start_time(self):
        """Gets the start_time of this AnnouncementsGetAnnouncementResponse.  # noqa: E501


        :return: The start_time of this AnnouncementsGetAnnouncementResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AnnouncementsGetAnnouncementResponse.


        :param start_time: The start_time of this AnnouncementsGetAnnouncementResponse.  # noqa: E501
        :type: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this AnnouncementsGetAnnouncementResponse.  # noqa: E501


        :return: The end_time of this AnnouncementsGetAnnouncementResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AnnouncementsGetAnnouncementResponse.


        :param end_time: The end_time of this AnnouncementsGetAnnouncementResponse.  # noqa: E501
        :type: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def publishable(self):
        """Gets the publishable of this AnnouncementsGetAnnouncementResponse.  # noqa: E501


        :return: The publishable of this AnnouncementsGetAnnouncementResponse.  # noqa: E501
        :rtype: bool
        """
        return self._publishable

    @publishable.setter
    def publishable(self, publishable):
        """Sets the publishable of this AnnouncementsGetAnnouncementResponse.


        :param publishable: The publishable of this AnnouncementsGetAnnouncementResponse.  # noqa: E501
        :type: bool
        """
        if publishable is None:
            raise ValueError("Invalid value for `publishable`, must not be `None`")  # noqa: E501

        self._publishable = publishable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnouncementsGetAnnouncementResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnouncementsGetAnnouncementResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
